{"version":3,"sources":["StateProvider.js","Header/Header.js","firebase.js","SideBar/SideBarOption/SideBarOption.js","SideBar/SideBar.js","Chats/Messages/Message.js","Chats/ChatInput/ChatInput.js","Chats/Chat.js","reducer.js","Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Header","user","className","Avatar","alt","displayName","src","photoURL","type","placeholder","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SideBarOption","Icon","title","addChannelOption","id","history","useHistory","onClick","channelName","prompt","collection","add","name","push","SideBar","useState","channel","setChannel","useEffect","onSnapshot","snapshot","docs","map","doc","data","InsertCommentIcon","InputIcon","DraftsIcon","BookmarkBorderIcon","PeopleAltIcon","AppsIcon","FileCopyIcon","ExpandLessIcon","ExpandMoreIcon","AddIcon","Message","message","timestamp","userImage","Date","toDate","toString","ChatInput","channelID","inputMessage","setInputMessage","onChange","e","target","toLowerCase","Button","preventDefault","FieldValue","serverTimestamp","Chat","roomID","useParams","roomDetails","setRoomDetails","roomMessages","setRoomMessages","orderBy","actionTypes","state","action","console","log","Login","dispatch","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.256ee078.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n\t<StateContext.Provider value={useReducer(reducer, initialState)}>{children}</StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport { Avatar } from '@material-ui/core';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport { useStateValue } from '../StateProvider';\r\n\r\nfunction Header() {\r\n\tconst [{ user }] = useStateValue();\r\n\r\n\treturn (\r\n\t\t<div className=\"header\">\r\n\t\t\t<div className=\"header__left\">\r\n\t\t\t\t<Avatar className=\"header__avatar\" alt={user?.displayName} src={user?.photoURL} />\r\n\t\t\t\t<AccessTimeIcon />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"header__center\">\r\n\t\t\t\t<SearchIcon />\r\n\t\t\t\t<input type=\"text \" placeholder=\"Search Web Developers\" />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"header__right\">\r\n\t\t\t\t<HelpOutlineIcon />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Header;\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n\tapiKey: 'AIzaSyC7zilkJsiAPg3XC_TZTsZeajbskT_PBsw',\r\n\tauthDomain: 'slack-clone-da499.firebaseapp.com',\r\n\tdatabaseURL: 'https://slack-clone-da499.firebaseio.com',\r\n\tprojectId: 'slack-clone-da499',\r\n\tstorageBucket: 'slack-clone-da499.appspot.com',\r\n\tmessagingSenderId: '535021505200',\r\n\tappId: '1:535021505200:web:b9af8c4f2afb12abd00975',\r\n\tmeasurementId: 'G-9K0N5MDGWF',\r\n};\r\n\r\n// initializing the app\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\n// connecting to the database\r\nconst db = firebaseApp.firestore();\r\n\r\n// making use of the authentication for Login system\r\nconst auth = firebase.auth();\r\n\r\n// using google authentication for Login Access\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };          // import { auth, provider } from './firebase\r\n\r\nexport default db;                  // import db from './firebase\r\n","import React from 'react';\r\nimport './SideBarOption.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport db from '../../firebase';\r\n\r\nfunction SideBarOption({ Icon, title, addChannelOption, id }) {\r\n\tconst history = useHistory();\r\n\r\n\t// redirecting by adding the fetched id to the url there for it can be used in the chat section to fetch the chat messages for that particular room/channel\r\n\tconst selectChannel = () => {\r\n\t\tif (id) {\r\n\t\t\thistory.push(`/room/${id}`);\r\n\t\t} else {\r\n\t\t\thistory.push(title);\r\n\t\t}\r\n\t};\r\n\r\n\t// if the user clicked the add channel icon\r\n\tconst addChannel = () => {\r\n\t\tconst channelName = prompt('Please enter the name of the channel');\r\n\r\n\t\t// If the user enters a channel name, then we pop in up into the database\r\n\t\tif (channelName) {\r\n\t\t\tdb.collection('rooms').add({\r\n\t\t\t\tname: channelName,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"sideBarOption\" onClick={addChannelOption ? addChannel : selectChannel}>\r\n\t\t\t{Icon && <Icon className=\"sideBarOption__icon\" />}\r\n\t\t\t{Icon ? (\r\n\t\t\t\t<h3>{title}</h3>\r\n\t\t\t) : (\r\n\t\t\t\t<h3 className=\"sideBarOption__channel\">\r\n\t\t\t\t\t<span className=\"sideBarOption__hash\"> # </span> {title}\r\n\t\t\t\t</h3>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SideBarOption;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './SideBar.css';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport SideBarOption from './SideBarOption/SideBarOption';\r\nimport InsertCommentIcon from '@material-ui/icons/InsertComment';\r\nimport InputIcon from '@material-ui/icons/Input';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport db from '../firebase';\r\nimport { useStateValue } from '../StateProvider';\r\n\r\nfunction SideBar() {\r\n\tconst [channel, setChannel] = useState([]);\r\n\tconst [{ user }] = useStateValue();\r\n\r\n\tuseEffect(() => {\r\n\t\t// note in this DB we are dealing with COLLECTION in ANOTHER COLLECTION\r\n\r\n\t\tdb.collection('rooms').onSnapshot((snapshot) =>\r\n\t\t\tsetChannel(\r\n\t\t\t\tsnapshot.docs.map((doc) => ({\r\n\t\t\t\t\tid: doc.id, // getting the id\r\n\t\t\t\t\tname: doc.data().name, // getting the name\r\n\t\t\t\t}))\r\n\t\t\t)\r\n\t\t);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className=\"sideBar\">\r\n\t\t\t<div className=\"sideBar__header\">\r\n\t\t\t\t<div className=\"sideBar__info\">\r\n\t\t\t\t\t<h2>Web Developers</h2>\r\n\t\t\t\t\t<h3>\r\n\t\t\t\t\t\t<FiberManualRecordIcon />\r\n\t\t\t\t\t\t{user?.displayName}\r\n\t\t\t\t\t</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t<CreateIcon />\r\n\t\t\t</div>\r\n\t\t\t<SideBarOption Icon={InsertCommentIcon} title=\"Threads\" />\r\n\t\t\t<SideBarOption Icon={InputIcon} title=\"Mentions & Reactions\" />\r\n\t\t\t<SideBarOption Icon={DraftsIcon} title=\"Saved items\" />\r\n\t\t\t<SideBarOption Icon={BookmarkBorderIcon} title=\"Channel browser\" />\r\n\t\t\t<SideBarOption Icon={PeopleAltIcon} title=\"People & user groups\" />\r\n\t\t\t<SideBarOption Icon={AppsIcon} title=\"Apps\" />\r\n\t\t\t<SideBarOption Icon={FileCopyIcon} title=\"File browser\" />\r\n\t\t\t<SideBarOption Icon={ExpandLessIcon} title=\"Show less\" />\r\n\r\n\t\t\t<hr />\r\n\t\t\t<SideBarOption Icon={ExpandMoreIcon} title=\"Channels\" />\r\n\r\n\t\t\t<hr />\r\n\t\t\t<SideBarOption Icon={AddIcon} addChannelOption title=\"Add Channel\" />\r\n\r\n\t\t\t{channel.map((channel) => (\r\n\t\t\t\t<SideBarOption title={channel.name} id={channel.id} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SideBar;\r\n","import React from 'react';\r\nimport './Message.css';\r\n\r\nfunction Message({ message, timestamp, user, userImage }) {\r\n\treturn (\r\n\t\t<div className=\"message\">\r\n\t\t\t<img src={userImage} alt=\"user-img\" />\r\n\t\t\t<div className=\"message__info\">\r\n\t\t\t\t<h4>\r\n\t\t\t\t\t{user}\r\n\t\t\t\t\t<span className=\"message__timestamp\">{new Date(timestamp?.toDate()).toString()}</span>\r\n\t\t\t\t</h4>\r\n\t\t\t\t<p>{message}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);  \r\n}\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport { useStateValue } from '../../StateProvider';\r\nimport db from '../../firebase';\r\nimport firebase from 'firebase';\r\nimport './ChatInput.css';\r\n\r\nfunction ChatInput({ channelName, channelID }) {\r\n\tconst [inputMessage, setInputMessage] = useState('');\r\n\tconst [{ user }] = useStateValue();\r\n\r\n\tconst sendMessage = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif (channelID) {\r\n\t\t\tdb.collection('rooms').doc(channelID).collection('messages').add({\r\n\t\t\t\tmessage: inputMessage,\r\n\t\t\t\ttimestamp: firebase.firestore.FieldValue.serverTimestamp(), // server timestamp not the local time stamp so the timestamps works properly in global usage\r\n\t\t\t\tuser: user.displayName,\r\n\t\t\t\tuserImage: user.photoURL,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsetInputMessage('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"chatInput\">\r\n\t\t\t<form>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tvalue={inputMessage}\r\n\t\t\t\t\tonChange={(e) => setInputMessage(e.target.value)}\r\n\t\t\t\t\tplaceholder={`Message #${channelName?.toLowerCase()}`}\r\n\t\t\t\t/>\r\n\t\t\t\t<Button onClick={sendMessage} type=\"submit\">\r\n\t\t\t\t\tSEND\r\n\t\t\t\t</Button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ChatInput;\r\n","import React, { useState } from 'react';\r\nimport './Chat.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport { useEffect } from 'react';\r\nimport db from '../firebase';\r\nimport Message from './Messages/Message';\r\nimport ChatInput from './ChatInput/ChatInput';\r\n\r\nfunction Chat() {\r\n\tconst { roomID } = useParams();\r\n\tconst [roomDetails, setRoomDetails] = useState(null);\r\n\tconst [roomMessages, setRoomMessages] = useState([]);\r\n\r\n\t// WHAT HAPPENS ACTUALLY IS THAT:\r\n\t// 1. Changes the URL when a particular room is clicked\r\n\t// 2. Connects to the database\r\n\t// 3. Uses URL param (roomID) to fetch room details from the database\r\n\r\n\t// get the data of a particular room / channel using firebase\r\n\tuseEffect(() => {\r\n\t\tif (roomID) {\r\n\t\t\t// we are fetching the data of the first collection here\r\n\t\t\tdb.collection('rooms')\r\n\t\t\t\t.doc(roomID)\r\n\t\t\t\t.onSnapshot((snapshot) => setRoomDetails(snapshot.data()));\r\n\r\n\t\t\t// now we are fetching the data of the second collection\r\n\t\t\tdb.collection('rooms')\r\n\t\t\t\t.doc(roomID)\r\n\t\t\t\t.collection('messages')\r\n\t\t\t\t.orderBy('timestamp', 'asc')\r\n\t\t\t\t.onSnapshot((snapshot) => setRoomMessages(snapshot.docs.map((doc) => doc.data())));\r\n\t\t}\r\n\t}, [roomID]);\r\n\r\n\treturn (\r\n\t\t<div className=\"chat\">\r\n\t\t\t<div className=\"chat__header\">\r\n\t\t\t\t<div className=\"chat__headerLeft\">\r\n\t\t\t\t\t<h4 className=\"chat__channelName\">\r\n\t\t\t\t\t\t<strong># {roomDetails?.name}</strong>\r\n\t\t\t\t\t\t<StarBorderIcon />\r\n\t\t\t\t\t</h4>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"chat__headerRight\">\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<InfoOutlinedIcon /> Details\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"chat__message\">\r\n\t\t\t\t{roomMessages.map(({ message, timestamp, user, userImage }) => (\r\n\t\t\t\t\t<Message message={message} timestamp={timestamp} user={user} userImage={userImage} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\r\n\t\t\t<ChatInput channelName={roomDetails?.name} channelID={roomID} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Chat;\r\n","export const initialState = {\r\n\tuser: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n\tSET_USER: 'SET_USER',\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n\tconsole.log(action);\r\n\r\n\tswitch (action.type) {\r\n\t\tcase actionTypes.SET_USER:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tuser: action.user,\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport './Login.css';\r\nimport { Button } from '@material-ui/core';\r\nimport { provider, auth } from '../firebase';\r\nimport { useStateValue } from '../StateProvider';\r\nimport { actionTypes } from '../reducer';\r\n\r\nfunction Login() {\r\n\tconst [state, dispatch] = useStateValue();\r\n\r\n\tconst signIn = () => {\r\n\t\t// setting up GOOGLE user authentication, NOTE that for this you have to enable GOOGLE authentication in your firebase under the Authentication tab\r\n\t\tauth.signInWithPopup(provider)\r\n\t\t\t.then((result) => {\r\n\t\t\t\tconsole.log(result); // returns details of the user logged\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: actionTypes.SET_USER,\r\n\t\t\t\t\tuser: result.user,\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(error.message);\r\n\t\t\t\talert('Error occurred, please refresh the page');\r\n\t\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"login\">\r\n\t\t\t<div className=\"login__container\">\r\n\t\t\t\t<img\r\n\t\t\t\t\tsrc=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/Slack_Technologies_Logo.svg/1280px-Slack_Technologies_Logo.svg.png\"\r\n\t\t\t\t\talt=\"logo\"\r\n\t\t\t\t/>\r\n\t\t\t\t<h1>\r\n\t\t\t\t\t<span className=\"login__red\">Sign </span>\r\n\t\t\t\t\t<span className=\"login__blue\">into </span>\r\n\t\t\t\t\t<span className=\"login__yellow\">Web</span>\r\n\t\t\t\t\t<span className=\"login__green\">Developer</span>\r\n\t\t\t\t</h1>\r\n\t\t\t\t<p>webdeveloper.slack.com</p>\r\n\t\t\t\t<Button onClick={signIn}>Sign in with Google</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\nimport './App.css';\nimport Header from './Header/Header';\nimport SideBar from './SideBar/SideBar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Chat from './Chats/Chat';\nimport Login from './Login/Login';\nimport { useStateValue } from './StateProvider';\n\nfunction App() {\n\tconst [{ user }] = useStateValue();\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Router>\n\t\t\t\t{!user ? (\n\t\t\t\t\t<Login />\n\t\t\t\t) : (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Header />\n\t\t\t\t\t\t<div className=\"app__body\">\n\t\t\t\t\t\t\t<SideBar />\n\n\t\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t\t<Route path=\"/room/:roomID\">\n\t\t\t\t\t\t\t\t\t<Chat />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t\t\t\t<div className=\"app__welcomeMsg\">\n\t\t\t\t\t\t\t\t\t\t<div>WELCOME TO SLACK</div>\n\t\t\t\t\t\t\t\t\t\t<div>{user.displayName} !</div>\n\t\t\t\t\t\t\t\t\t\t<div>😀</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './StateProvider';\nimport reducer, { initialState } from './reducer';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<StateProvider initialState={initialState} reducer={reducer}>\n\t\t\t<App />\n\t\t</StateProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}